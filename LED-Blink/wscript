#!/usr/bin/env python
# encoding: utf-8

import os
import time
import glob

APPNAME = 'led-blink'
VERSION = 'v0.1'

top	= '.'
out	= 'build'

def options(opt):

	opt.load('gcc gas')

	opt.add_option('--toolchain', action='store', default='arm-none-eabi-', help='Set toolchain prefix')

def configure(cfg):

	print('â†’ configuring the project in ' + cfg.path.abspath())
	# Toolchain configurations
	cfg.env.CC = cfg.options.toolchain + "gcc"
	cfg.env.AS = cfg.options.toolchain + "gcc"
	cfg.env.LD = cfg.options.toolchain + "ld"
	cfg.env.OBJCOPY = cfg.options.toolchain + 'objcopy'
	cfg.env.OBJDUMP = cfg.options.toolchain + 'objdump'
	cfg.env.SIZE = cfg.options.toolchain + 'size'
	cfg.load('gcc gas')

	cfg.find_program('ld', var='LD')
	cfg.find_program('objcopy', var='OBJCOPY')
	cfg.find_program('objdump', var='OBJDUMP')
	cfg.find_program('size', var='SIZE')
	cfg.find_program('st-flash', var='st-flash')
	

	# Cortex-M4 implements the ARMv7E-M architecture
	link_script = '../CORTEX_M4F_STM32F4/STM32F429ZI_FLASH.ld'

	cfg.env.append_unique('CFLAGS',['-mcpu=cortex-m4','-march=armv7e-m', '-mtune=cortex-m4', '-mlittle-endian', '-mthumb','-g','-std=c99','-Wall'
			 		,'-mfpu=fpv4-sp-d16','-mfloat-abi=softfp'
			 		,'-g','-std=c99','-Wall','-O3','-ffast-math','-ffunction-sections','-fdata-sections','-Wl,--gc-sections','-fno-common','--param','max-inline-insns-single=1000'
			 		])
	#My restart
	#Drivers/CMSIS
	cfg.env.append_unique('FILES_STM32F429',		['Src/*.c'])
	
	# STARTUP FILE
	cfg.env.append_unique('FILES_STM32F429',		['CORTEX_M4F_STM32F4/startup_stm32f429xx.s'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c_ex.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c.c'])
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c'])
#Drivers/BSP/STM32F429I_DISCO
	cfg.env.append_unique('FILES_LIB',		['../../STM32Cube_FW_F4_V1.8.0/Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery.c'])
	
	#cfg.env.append_unique('ASFLAGS_STM32F429',	['-xassembler-with-cpp', '-nostartfiles', '-c'])
	# to run from FLASH (Wait)
	cfg.env.append_unique('LINKFLAGS_STM32F429',	['-T{0}'.format(link_script)
		# Disable Semihosting
		,'--specs=nosys.specs'
		,'/usr/local/gcc-arm/bin/../lib/gcc/arm-none-eabi/5.3.1/../../../../arm-none-eabi/lib/libc.a'
		,'/usr/local/gcc-arm/bin/../lib/gcc/arm-none-eabi/5.3.1/libgcc.a'] )
	cfg.env.append_unique('DEFINES_STM32F429', 
		[
		'STM32F429xx',
		'VECT_TAB_FLASH',
		#'"assert_param(expr)=((void)0)"',
		'USE_HAL_DRIVER','USE_STM32F429I_DISCO'
		]
		)





def build(bld):
	bld(export_includes = 
    ['Inc',
    '../../STM32Cube_FW_F4_V1.8.0/Drivers/BSP/STM32F429I-Discovery',
    '../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Inc',
    '../../STM32Cube_FW_F4_V1.8.0/Drivers/CMSIS/Include',
    '../../STM32Cube_FW_F4_V1.8.0/Drivers/CMSIS/Device/ST/STM32F4xx/Include']
    , name='include')
    
    #bld.objects(
    #source = 'CORTEX_M4F_STM32F4/startup_stm32f429xx.s',
    #target ='sta',
    #includes = 'include',
    #defines = bld.env.DEFINES_STM32F429,
    #linkflags = bld.env.LINKFLAGS_STM32F429
    #)
	
	bld.program(
    #source = ['CORTEX_M4F_STM32F4/startup_stm32f429xx.s','Src/main.c'],
    #source = '../../STM32Cube_FW_F4_V1.8.0/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c',
    source = bld.path.ant_glob(bld.env.FILES_STM32F429) + bld.env.FILES_LIB,
    target ='Display.elf',
    defines = bld.env.DEFINES_STM32F429,
    linkflags = bld.env.LINKFLAGS_STM32F429,
    use = ['include'] 
    )
    #ctx.recurse(modules, mandatory=False)
    #bld.program(
	#	source = bld.path.ant_glob(bld.env.FILES_STM32F429),
	#	target = 'Display.elf', 
	#	includes = 'include', 
	#	defines = bld.env.DEFINES_STM32F429,
	#	linkflags = bld.env.LINKFLAGS_STM32F429,
	#	use = 'stttt'
	#	)
	bld(rule='${OBJCOPY} -O binary ${SRC} ${TGT}', source='Display.elf', target='Display.bin', name='objcopy')
	bld(rule='${SIZE} ${SRC}', source='Display.elf', always=True, name='size')

def program(pgm):
	pgm(rule='st-flash write ${SRC} 0x8000000', source='Display.bin', name='STLINK', always=True)

from waflib.Build import BuildContext
class Program(BuildContext):
    cmd = 'program'
    fun = 'program'
